<?php

namespace Tests\Feature;

use App\Models\Transaction;
use App\Models\User;
use App\Models\Wallet;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class UserTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    public $user;
    public $token;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->authenticateUser();

        $this->seed(\DatabaseSeeder::class);
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    public function testUserCanFetchDashboardStats()
    {
        // create a user from factory
        $user = factory(User::class)->create();

        // create the user's wallet data from factory
        $wallet = factory(Wallet::class)->create(['user_id' => $user->id]);

        // create the 5 user's wallet data transaction from factory
        factory(Transaction::class, 5)->create([
            'wallet_id' => $wallet->id,
            'amount' => $wallet->available_balance/5
        ]);


        // authenticates the created user, so as to fetch the created savings
        $this->authenticateUser($user);

        $response = $this->withToken($this->token)->getJson('api/user/dashboard/stats');

        $response->assertOk();
        $response->assertJson(['success' => true]);
        $response->assertJsonStructure(['data']);

    }




    private function authenticateUser($user = null)
    {
        $user = $user ?: factory(User::class)->create();

        $response = $this->postJson('api/auth/login', ["email" => $user->email, "password" => "password"]);
        $data = $response->json();

        $this->token = $data['access_token'];
    }
}
